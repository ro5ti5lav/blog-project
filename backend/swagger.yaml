openapi: 3.0.0
info:
  title: Blog API
  description: API для блог-платформы
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Локальный сервер разработки

paths:
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Авторизация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
        '400':
          description: Ошибка валидации или пользователь уже существует

  /api/auth/login:
    post:
      summary: Вход в систему
      tags:
        - Авторизация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: number
                      username:
                        type: string

  /api/posts:
    get:
      summary: Получение всех постов
      tags:
        - Посты
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    
    post:
      summary: Создание нового поста
      tags:
        - Посты
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  type: string
                media:
                  type: string
                  format: binary
      responses:
        '201':
          description: Пост успешно создан

  /api/posts/{id}:
    put:
      summary: Обновление поста
      tags:
        - Посты
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Пост успешно обновлен
        '403':
          description: Нет прав на редактирование
        '404':
          description: Пост не найден

    delete:
      summary: Удаление поста
      tags:
        - Посты
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пост успешно удален
        '403':
          description: Нет прав на удаление
        '404':
          description: Пост не найден

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
        message:
          type: string
        mediaUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 